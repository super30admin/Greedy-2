class Solution {
    
    //621. Task Scheduler
    //Time complexity : O(n)
    //Space complexity : O(1)
    public int leastInterval(char[] tasks, int n) {
        
        if(tasks ==null || tasks.length ==0)
            return 0;
        
        HashMap<Character,Integer> map = new HashMap<>();
        int maxFreq =0;
        int maxCount =0;
        
        for(char c : tasks){
            
            if(!map.containsKey(c)){
                map.put(c,0);
            }
           
            int cnt = map.get(c);
            cnt++;
            maxFreq = Math.max(maxFreq,cnt);  //get the max frequency character's                                                   count
            map.put(c,cnt);
            
        }
        
        for(int val : map.values()){
            if(maxFreq == val){
                maxCount++;          //check with other characters whose maxFreq is                                         same
            }
        }
        
        int partitions = maxFreq -1;
        int empty = partitions * (n-maxCount +1);
        int available = tasks.length - (maxCount * maxFreq);
        int idle = Math.max(0, empty - available);
        return tasks.length + idle;
        
    }
}