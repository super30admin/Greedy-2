/***********
Time O(n)
Space O(n)
Problem no
Leetcode yes

We first store last occurence of each character. Starting window is from index 0 to last occurence of character at 0 position.
Now we iterate through this window and keep checking whether each character inside this window also has its last occurence
inside this window. If it is not, we increase the size of window till the last occurence of that character.
***********/
class Solution {
    public List<Integer> partitionLabels(String S) {
        
        List<Integer> result = new ArrayList<>();
        int[] lastIndex = new int[26];
        
        for(int i = 0; i< S.length() ;i++)
            lastIndex[S.charAt(i) - 'a'] = i;
        
        int i=0;
        while(i < S.length())
        {
            int end = lastIndex[S.charAt(i) - 'a'];
            int j = i;
            while(j!=end)
            {
                end = Math.max(end, lastIndex[S.charAt(j++) - 'a']);
            }
            result.add(j -i +1);
            i = j+1;
        }
        
        return result;
    }
}
