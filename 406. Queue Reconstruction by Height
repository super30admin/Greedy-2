//TC: O(N ^ 2) ??
//SC: O(N) --> Additional list to compute

//Approach: Idea is to make custom comparator for sorting in descending order by people[0] and if same element found --> sort them in ascending
//HINT: Adding to List based on the index of elements of SORTED array

class Solution {
    public int[][] reconstructQueue(int[][] people) {
        if(people == null || people.length == 0){
            return new int[][]{};
        }
        / * O(nlogn) */
        Arrays.sort(people, (a,b)-> {
            if(a[0] == b[0]){
                 return a[1] - b[1];    //If same height --> sort in ascending order
             }
            return b[0] - a[0];         //else sort in descending order
        });
        
        List<int[]> result = new ArrayList<>();
        /* O (N ^ 2) --> adding to index adds to complexity*/
        for(int[] person : people){
            result.add(person[1], person);    
        }

        int[][] arr = new int[result.size()][2];
        for(int i = 0; i < result.size() ; i++){
            arr[i][0] = result.get(i)[0];
            arr[i][1] = result.get(i)[1];
        }
        return arr;
    }
}
