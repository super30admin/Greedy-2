class Solution {
    public int leastInterval(char[] tasks, int n) {
        if(tasks==null || tasks.length==0) return 0;
        HashMap<Character,Integer> map=new HashMap<>();
        int maxFreq=0;
        int maxCount=0;
        for(char c:tasks){
            int cnt=  map.getOrDefault(c,0);
            cnt++;
           // maxFreq=map.get(c);
            maxFreq=Math.max(maxFreq,cnt);
            map.put(c,cnt);
        }
        for(char task :map.keySet()){
            if(maxFreq==map.get(task)){
                maxCount++;
            }
        }
        int partitions=maxFreq-1;
        int available=partitions*(n-(maxCount-1));
        int pending=tasks.length-(maxCount*maxFreq);
        int idle=Math.max(0,(available-pending));
        return idle+tasks.length;
        
    }
}
//tc:O(n)
//sc:O(n)